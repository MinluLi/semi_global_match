
    float* unaryCostsCubeH = (float*) malloc (sizeof(float)*leftImg.xSize()*leftImg.ySize()*(MAX_DISPARITY+1));
    cudaMemcpy((void*)unaryCostsCubeH, (void*)unaryCostsCubeD, sizeof(float)*leftImg.xSize()*leftImg.ySize()*(MAX_DISPARITY+1), cudaMemcpyDeviceToHost);
    for (int y = 0; y < leftImg.ySize(); ++y) {
      for (int x = 0; x < leftImg.xSize(); ++x) {
        for (int i = 0; i <= MAX_DISPARITY; ++i) {
          int offset = x + y*leftImg.xSize() + i*leftImg.xSize()*leftImg.ySize();
          std::cout << "(" << x << ", " << y << ", " << i << "): " << unaryCostsCubeH[offset] << std::endl;
        }
      }
    }

