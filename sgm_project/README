
    ********************************
          Semi-Global Matching 
    ********************************

CUDA C implementation of a semi-global matching algorithm for the GPU Programming course at the department of Computer Science of the University of Freiburg, Germany.


Folder structure:
bin  			- Scripts and executable files
cpu_ref  		- CPU reference implementation for 1 direction 
data 			- Data for experiments  
gpu_impl  		- Put your implementations here 
libArrayUtilities  	- CMatrix, CTensor and NMath 
Makefile  		- For compiling everything 
tools			- Tools disp-epe and float3-to-pgm 

Environment: 
------------ 

Add the "bin" folder the PATH environment variable

export PATH=/path/to/sgm_project/bin:$PATH

Compiling: 
---------- 

In the root folder type "make install".

Subfolders "include" containing the C headers and "lib" containing
libArrayUtilities.a will be created and the evaluation binaries placed
in "bin"

Evaluation: 
----------- 

For the Sintel images (data/sintel), ground-truth is provided. You can 
use it to compute endpoint errors. For this you have to save your 
computed disparity to a .float3 file like: 

CMatrix<float> disp; 
// compute disp ... 
disp.writeToFloatFile('your-disp.float3'); 

You can then use the tool "disp-epe" to compute the endpoint error.
Note that some pixels from the left image may not be visible in the 
second image. These are called "occluded". For example, you can 
compute overall and non-occluded endpoint errors as follows: 

cd /path/to/project2015/data/sintel 
disp-epe your-disp.float3 1-gt.float3 	         # overall EPE 
disp-epe your-disp.float3 1-gt.float3 1-occ.pgm  # non-occluded EPE

For visualization, you can also convert the .float3 files to .pgm 
as follows: 

float3-to-pgm your-disp.float3 your-disp.pgm 


